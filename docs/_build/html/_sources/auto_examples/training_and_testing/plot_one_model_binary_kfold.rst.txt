
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/training_and_testing/plot_one_model_binary_kfold.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_training_and_testing_plot_one_model_binary_kfold.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_training_and_testing_plot_one_model_binary_kfold.py:


Binary: training one kfold model
==================================================================

This script shows how to train one fusion models on a binary task with k-fold training protocol and multimodal tabular data.

Key Features:

- Importing a model based on its path.
- Training and testing a model with k-fold cross validation.
- Plotting the results of a single k-fold model.

.. GENERATED FROM PYTHON SOURCE LINES 13-20

.. code-block:: default


    import matplotlib.pyplot as plt
    from tqdm.auto import tqdm
    import os

    print(os.getcwd())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/florencetownend/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Projects/fusilli/docs/examples/training_and_testing




.. GENERATED FROM PYTHON SOURCE LINES 21-28

.. code-block:: default

    from docs.examples import generate_sklearn_simulated_data

    print(os.getcwd())
    # from .. import generate_sklearn_simulated_data
    from fusilli.data import get_data_module
    from fusilli.eval import Plotter



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/florencetownend/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Projects/fusilli/docs/examples/training_and_testing/plot_one_model_binary_kfold.py", line 26, in <module>
        from fusilli.eval import Plotter
    ImportError: cannot import name 'Plotter' from 'fusilli.eval' (/Users/florencetownend/Library/CloudStorage/OneDrive-UniversityCollegeLondon/Projects/fusilli/fusilli/eval.py)




.. GENERATED FROM PYTHON SOURCE LINES 29-31

1. Import model
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 31-36

.. code-block:: default

    from fusilli.fusion_models.tab_crossmodal_att import (
        TabularCrossmodalMultiheadAttention,
    )
    from fusilli.train import train_and_save_models


.. GENERATED FROM PYTHON SOURCE LINES 37-39

2. Set the training parameters
--------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: default


    params = {
        "kfold_flag": True,
        "num_k": 5,
        "log": False,
        "pred_type": "binary",
        "batch_size": 32,
    }


.. GENERATED FROM PYTHON SOURCE LINES 49-51

3. Generate simulated data
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 51-59

.. code-block:: default

    params = generate_sklearn_simulated_data(
        num_samples=500,
        num_tab1_features=10,
        num_tab2_features=10,
        img_dims=(1, 100, 100),
        params=params,
    )


.. GENERATED FROM PYTHON SOURCE LINES 60-61

4. Initialise model

.. GENERATED FROM PYTHON SOURCE LINES 61-67

.. code-block:: default

    fusion_model = TabularCrossmodalMultiheadAttention

    print("method_name:", fusion_model.method_name)
    print("modality_type:", fusion_model.modality_type)
    print("fusion_type:", fusion_model.fusion_type)


.. GENERATED FROM PYTHON SOURCE LINES 68-70

5. Train and test the model
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 70-82

.. code-block:: default

    dm = get_data_module(
        fusion_model=fusion_model, params=params, batch_size=params["batch_size"]
    )

    # train and test
    single_model_dict = train_and_save_models(
        data_module=dm,
        params=params,
        fusion_model=fusion_model,
        enable_checkpointing=False,  # False for the example notebooks
    )


.. GENERATED FROM PYTHON SOURCE LINES 83-85

6. Plot the results
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 85-88

.. code-block:: default

    plotter = Plotter(single_model_dict, params)
    single_model_figures_dict = plotter.plot_all()
    plotter.show_all(single_model_figures_dict)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.065 seconds)


.. _sphx_glr_download_auto_examples_training_and_testing_plot_one_model_binary_kfold.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_one_model_binary_kfold.py <plot_one_model_binary_kfold.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_one_model_binary_kfold.ipynb <plot_one_model_binary_kfold.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
